{"version":3,"file":"local.mjs","sources":["../src/core/create/createDirectory.mjs","../src/core/status/getStatus.mjs","../src/core/write/writeFile.mjs","../src/core/create/createFile.mjs","../src/core/access/wrapper.mjs","../src/core/dir/dirIsExecutable.mjs","../src/core/dir/dirIsReadable.mjs","../src/core/dir/dirIsVisible.mjs","../src/core/dir/dirIsWritable.mjs","../src/core/status/isDirExists.mjs","../src/core/status/isFileExists.mjs","../src/core/status/isPathExists.mjs","../src/core/file/fileIsExecutable.mjs","../src/core/file/fileIsReadable.mjs","../src/core/file/fileIsVisible.mjs","../src/core/file/fileIsWritable.mjs","../src/core/file/fileTruncate.mjs","../src/index.mjs"],"sourcesContent":["import { promises } from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\n/**\n * @name createDirectory\n * @description Asynchronous create a directory.\n * @since 0.0.10\n * @async\n * @param {string|Buffer|URL} dirPath\n * @param {number|string=} mode\n * @param {boolean=} recursive\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport async function createDirectory(dirPath, mode = \"0777\", recursive = true) {\n  const dirError = await ofError(promises.mkdir(dirPath, { mode, recursive }));\n  if (dirError) {\n    return dirError;\n  }\n  return true;\n}\n","import { promises } from \"fs\";\n\nimport { of } from \"@r37r0m0d3l/of\";\n\n/**\n * @name getStatus\n * @description Get file status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<[fs.Stats|undefined][Error|{readonly name: string, readonly message: string, readonly stack?: string}]>}\n */\nexport async function getStatus(path) {\n  return of(promises.stat(path));\n}\n","import { promises } from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\n/**\n * @name writeFile\n * @description Asynchronously writes data to a file, replacing the file if it already exists.\n * @since 0.0.10\n * @async\n * @param {string|Buffer|URL|FileHandle} filePath\n * @param {*=} data\n * @param {*|null|string=} options\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport async function writeFile(filePath, data, options) {\n  const writeError = await ofError(promises.writeFile(filePath, data, options));\n  if (writeError) {\n    return writeError;\n  }\n  return true;\n}\n","import path from \"path\";\nimport { promises } from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\nimport { createDirectory } from \"./createDirectory.mjs\";\nimport { getStatus } from \"../status/getStatus.mjs\";\nimport { writeFile } from \"../write/writeFile.mjs\";\n\n/**\n * @name createFile\n * @description Asynchronous create a file.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} pathLike\n * @param {number|string=} mode\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport async function createFile(pathLike, mode = \"0777\") {\n  const [status, error] = await getStatus(pathLike);\n  if (!error && status.isFile()) {\n    return true;\n  }\n  const dirPath = path.dirname(pathLike);\n  if (error) {\n    if (error.code === \"ENOENT\") {\n      const dirCreated = await createDirectory(dirPath, mode);\n      if (dirCreated !== true) {\n        return dirCreated;\n      }\n      const fileWritten = await writeFile(pathLike, \"\", { mode, flag: \"w\" });\n      if (fileWritten !== true) {\n        return fileWritten;\n      }\n      return true;\n    }\n  }\n  if (status.isDirectory()) {\n    return await writeFile(pathLike, \"\", { mode, flag: \"w\" });\n  } else {\n    return await ofError(promises.readdir(dirPath));\n  }\n}\n","import * as fs from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\n/**\n * @name accessWrapper\n * @description Asynchronously tests a user's permissions for the file specified by path.\n * @since 0.0.1\n * @async\n * @param {number} mode\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function accessWrapper(mode, path) {\n  const fsError = await ofError(fs.promises.access(path, mode));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsExecutable\n * @description Directory can be executed by the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsExecutable(pathToDir) {\n  return accessWrapper(constants.X_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsReadable\n * @description Directory is visible to the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsReadable(pathToDir) {\n  return accessWrapper(constants.R_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsVisible\n * @description Directory is visible to the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsVisible(pathToDir) {\n  return accessWrapper(constants.F_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsWritable\n * @description Directory can be written by the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsWritable(pathToDir) {\n  return accessWrapper(constants.W_OK, pathToDir);\n}\n","import { getStatus } from \"./getStatus.mjs\";\n\n/**\n * @name isDirExists\n * @description Get directory status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean>}\n */\nexport async function isDirExists(path) {\n  const [status, error] = await getStatus(path);\n  if (error) {\n    return false;\n  }\n  return status.isDirectory();\n}\n","import { getStatus } from \"./getStatus.mjs\";\n\n/**\n * @name isFileExists\n * @description Get file status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean>}\n */\nexport async function isFileExists(path) {\n  const [status, error] = await getStatus(path);\n  if (error) {\n    return false;\n  }\n  return status.isFile();\n}\n","import { getStatus } from \"./getStatus.mjs\";\n\n/**\n * @name isPathExists\n * @description Get path status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean>}\n */\nexport async function isPathExists(path) {\n  const [status] = await getStatus(path);\n  return Boolean(status);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsExecutable\n * @description File can be executed by the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsExecutable(pathToFile) {\n  return accessWrapper(constants.X_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsReadable\n * @description File is visible to the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsReadable(pathToFile) {\n  return accessWrapper(constants.R_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsVisible\n * @description File is visible to the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsVisible(pathToFile) {\n  return accessWrapper(constants.F_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsWritable\n * @description File can be written by the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsWritable(pathToFile) {\n  return accessWrapper(constants.W_OK, pathToFile);\n}\n","import { promises } from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\n/**\n * @name fileTruncate\n * @description Truncate a file to a specified length\n * @since 0.0.6\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @param {number=0} length\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileTruncate(pathToFile, length = 0) {\n  const fsError = await ofError(promises.truncate(pathToFile, length));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import { createDirectory } from \"./core/create/createDirectory.mjs\";\nimport { createFile } from \"./core/create/createFile.mjs\";\n\nimport dirIsExecutable from \"./core/dir/dirIsExecutable.mjs\";\nimport dirIsReadable from \"./core/dir/dirIsReadable.mjs\";\nimport dirIsVisible from \"./core/dir/dirIsVisible.mjs\";\nimport dirIsWritable from \"./core/dir/dirIsWritable.mjs\";\n\nimport { getStatus } from \"./core/status/getStatus.mjs\";\n\nimport { isDirExists } from \"./core/status/isDirExists.mjs\";\nimport { isFileExists } from \"./core/status/isFileExists.mjs\";\nimport { isPathExists } from \"./core/status/isPathExists.mjs\";\n\nimport fileIsExecutable from \"./core/file/fileIsExecutable.mjs\";\nimport fileIsReadable from \"./core/file/fileIsReadable.mjs\";\nimport fileIsVisible from \"./core/file/fileIsVisible.mjs\";\nimport fileIsWritable from \"./core/file/fileIsWritable.mjs\";\n\nimport fileTruncate from \"./core/file/fileTruncate.mjs\";\n\nimport { writeFile } from \"./core/write/writeFile.mjs\";\n\n\nclass HileSystemLocal {\n  /**\n   * @name createDirectory\n   * @description Asynchronous create a directory.\n   * @since 0.0.10\n   * @async\n   * @static\n   * @param {string|Buffer|URL} dirPath\n   * @param {number|string=} mode\n   * @param {boolean=} recursive\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static createDirectory = createDirectory;\n  /**\n   * @name createFile\n   * @description Asynchronous create a file.\n   * @since 0.0.11\n   * @async\n   * @static\n   * @param {string|Buffer|URL} pathLike\n   * @param {number|string=} mode\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static createFile = createFile;\n  /**\n   * @name dirIsExecutable\n   * @description Directory can be executed by the calling process\n   * @since 0.0.5\n   * @async\n   * @static\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsExecutable = dirIsExecutable;\n  /**\n   * @name dirIsReadable\n   * @description Directory is visible to the calling process\n   * @since 0.0.1\n   * @async\n   * @static\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsReadable = dirIsReadable;\n  /**\n   * @name dirIsVisible\n   * @description Directory is visible to the calling process\n   * @since 0.0.5\n   * @async\n   * @static\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsVisible = dirIsVisible;\n  /**\n   * @name dirIsWritable\n   * @description Directory can be written by the calling process\n   * @since 0.0.1\n   * @async\n   * @static\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsWritable = dirIsWritable;\n  /**\n   * @name getStatus\n   * @description Get file status.\n   * @since 0.0.11\n   * @async\n   * @static\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<[fs.Stats|undefined][Error|{readonly name: string, readonly message: string, readonly stack?: string}]>}\n   */\n  static getStatus = getStatus;\n  /**\n   * @name isDirExists\n   * @description Get directory status.\n   * @since 0.0.11\n   * @async\n   * @static\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<boolean>}\n   */\n  static isDirExists = isDirExists;\n  /**\n   * @name isFileExists\n   * @description Get file status.\n   * @since 0.0.11\n   * @async\n   * @static\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<boolean>}\n   */\n  static isFileExists = isFileExists;\n  /**\n   * @name isPathExists\n   * @description Get path status.\n   * @since 0.0.11\n   * @async\n   * @static\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<boolean>}\n   */\n  static isPathExists = isPathExists;\n  /**\n   * @name fileIsExecutable\n   * @description File can be executed by the calling process\n   * @since 0.0.5\n   * @async\n   * @static\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsExecutable = fileIsExecutable;\n  /**\n   * @name fileIsReadable\n   * @description File is visible to the calling process\n   * @since 0.0.1\n   * @async\n   * @static\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsReadable = fileIsReadable;\n  /**\n   * @name fileIsVisible\n   * @description File is visible to the calling process\n   * @since 0.0.5\n   * @async\n   * @static\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsVisible = fileIsVisible;\n  /**\n   * @name fileIsWritable\n   * @description File can be written by the calling process\n   * @since 0.0.1\n   * @async\n   * @static\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsWritable = fileIsWritable;\n  /**\n   * @name fileTruncate\n   * @description Truncate a file to a specified length\n   * @since 0.0.6\n   * @async\n   * @static\n   * @param {string|Buffer|URL} pathToFile\n   * @param {number=0} length\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileTruncate = fileTruncate;\n  /**\n   * @name writeFile\n   * @description Asynchronously writes data to a file, replacing the file if it already exists.\n   * @since 0.0.10\n   * @async\n   * @static\n   * @param {string|Buffer|URL|FileHandle} filePath\n   * @param {*=} data\n   * @param {*|null|string=} options\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static writeFile = writeFile;\n}\n\nexport {\n  HileSystemLocal,\n  createDirectory,\n  createFile,\n  dirIsExecutable,\n  dirIsReadable,\n  dirIsVisible,\n  dirIsWritable,\n  fileIsExecutable,\n  fileIsReadable,\n  fileIsVisible,\n  fileIsWritable,\n  fileTruncate,\n  getStatus,\n  isDirExists,\n  isFileExists,\n  isPathExists,\n  writeFile,\n};\n"],"names":["async","createDirectory","dirPath","mode","recursive","dirError","ofError","promises","mkdir","getStatus","path","of","stat","writeFile","filePath","data","options","writeError","createFile","pathLike","status","error","isFile","dirname","code","dirCreated","fileWritten","flag","isDirectory","readdir","accessWrapper","fsError","fs","access","dirIsExecutable","pathToDir","constants","X_OK","dirIsReadable","R_OK","dirIsVisible","F_OK","dirIsWritable","W_OK","isDirExists","isFileExists","isPathExists","Boolean","fileIsExecutable","pathToFile","fileIsReadable","fileIsVisible","fileIsWritable","fileTruncate","length","truncate","HileSystemLocal"],"mappings":"wPAcOA,eAAeC,gBAAgBC,EAASC,EAAO,OAAQC,GAAY,SAClEC,QAAiBC,EAAQC,EAASC,MAAMN,EAAS,CAAEC,KAAAA,EAAMC,UAAAA,YAC3DC,IAGG,ECPFL,eAAeS,UAAUC,UACvBC,EAAGJ,EAASK,KAAKF,ICCnBV,eAAea,UAAUC,EAAUC,EAAMC,SACxCC,QAAmBX,EAAQC,EAASM,UAAUC,EAAUC,EAAMC,WAChEC,IAGG,ECDFjB,eAAekB,WAAWC,EAAUhB,EAAO,cACzCiB,EAAQC,SAAeZ,UAAUU,OACnCE,GAASD,EAAOE,gBACZ,QAEHpB,EAAUQ,EAAKa,QAAQJ,MACzBE,GACiB,WAAfA,EAAMG,KAAmB,OACrBC,QAAmBxB,gBAAgBC,EAASC,OAC/B,IAAfsB,SACKA,QAEHC,QAAoBb,UAAUM,EAAU,GAAI,CAAEhB,KAAAA,EAAMwB,KAAM,aAC5C,IAAhBD,GACKA,SAKTN,EAAOQ,oBACIf,UAAUM,EAAU,GAAI,CAAEhB,KAAAA,EAAMwB,KAAM,YAEtCrB,EAAQC,EAASsB,QAAQ3B,IC3B3BF,eAAe8B,cAAc3B,EAAMO,SAC1CqB,QAAgBzB,EAAQ0B,EAAYC,OAAOvB,EAAMP,WAClD4B,IACI,ECJI/B,eAAekC,gBAAgBC,UACrCL,cAAcM,EAAUC,KAAMF,GCDxBnC,eAAesC,cAAcH,UACnCL,cAAcM,EAAUG,KAAMJ,GCDxBnC,eAAewC,aAAaL,UAClCL,cAAcM,EAAUK,KAAMN,GCDxBnC,eAAe0C,cAAcP,UACnCL,cAAcM,EAAUO,KAAMR,GCHhCnC,eAAe4C,YAAYlC,SACzBU,EAAQC,SAAeZ,UAAUC,UACpCW,GAGGD,EAAOQ,cCLT5B,eAAe6C,aAAanC,SAC1BU,EAAQC,SAAeZ,UAAUC,UACpCW,GAGGD,EAAOE,SCLTtB,eAAe8C,aAAapC,SAC1BU,SAAgBX,UAAUC,UAC1BqC,QAAQ3B,GCAFpB,eAAegD,iBAAiBC,UACtCnB,cAAcM,EAAUC,KAAMY,GCDxBjD,eAAekD,eAAeD,UACpCnB,cAAcM,EAAUG,KAAMU,GCDxBjD,eAAemD,cAAcF,UACnCnB,cAAcM,EAAUK,KAAMQ,GCDxBjD,eAAeoD,eAAeH,UACpCnB,cAAcM,EAAUO,KAAMM,GCAxBjD,eAAeqD,aAAaJ,EAAYK,EAAS,SACxDvB,QAAgBzB,EAAQC,EAASgD,SAASN,EAAYK,WACvDvB,IACI,ECQX,MAAMyB,iCAAAA,kCAYqBvD,iCAZrBuD,6BAuBgBtC,4BAvBhBsC,kCAiCqBtB,iCAjCrBsB,gCA2CmBlB,+BA3CnBkB,+BAqDkBhB,8BArDlBgB,gCA+DmBd,+BA/DnBc,4BAyEe/C,2BAzEf+C,8BAmFiBZ,6BAnFjBY,+BA6FkBX,8BA7FlBW,+BAuGkBV,8BAvGlBU,mCAiHsBR,kCAjHtBQ,iCA2HoBN,gCA3HpBM,gCAqImBL,+BArInBK,iCA+IoBJ,gCA/IpBI,+BA0JkBH,8BA1JlBG,4BAsKe3C"}