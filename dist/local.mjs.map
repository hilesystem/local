{"version":3,"file":"local.mjs","sources":["../src/core/access/wrapper.mjs","../src/core/dir/dirIsExecutable.mjs","../src/core/dir/dirIsReadable.mjs","../src/core/dir/dirIsVisible.mjs","../src/core/dir/dirIsWritable.mjs","../src/core/file/fileIsExecutable.mjs","../src/core/file/fileIsReadable.mjs","../src/core/file/fileIsVisible.mjs","../src/core/file/fileIsWritable.mjs","../src/core/file/fileTruncate.mjs","../src/index.mjs"],"sourcesContent":["import * as fs from \"fs\";\n\nimport { default as OF } from \"@r37r0m0d3l/of\";\n\n/**\n * @name accessWrapper\n * @description Asynchronously tests a user's permissions for the file specified by path.\n * @since 0.0.1\n * @async\n * @param {number} mode\n * @param {string} path\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function accessWrapper(mode, path) {\n  const fsError = await OF.ofError(fs.promises.access(path, mode));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsExecutable\n * @description Directory can be executed by the calling process\n * @since 0.0.5\n * @async\n * @param {string} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsExecutable(pathToDir) {\n  return accessWrapper(constants.X_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsReadable\n * @description Directory is visible to the calling process\n * @since 0.0.1\n * @async\n * @param {string} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsReadable(pathToDir) {\n  return accessWrapper(constants.R_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsVisible\n * @description Directory is visible to the calling process\n * @since 0.0.5\n * @async\n * @param {string} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsVisible(pathToDir) {\n  return accessWrapper(constants.F_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsWritable\n * @description Directory can be written by the calling process\n * @since 0.0.1\n * @async\n * @param {string} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsWritable(pathToDir) {\n  return accessWrapper(constants.W_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsExecutable\n * @description File can be executed by the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsExecutable(pathToFile) {\n  return accessWrapper(constants.X_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsReadable\n * @description File is visible to the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsReadable(pathToFile) {\n  return accessWrapper(constants.R_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsVisible\n * @description File is visible to the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsVisible(pathToFile) {\n  return accessWrapper(constants.F_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsWritable\n * @description File can be written by the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsWritable(pathToFile) {\n  return accessWrapper(constants.W_OK, pathToFile);\n}\n","import { promises } from \"fs\";\n\nimport { default as OF } from \"@r37r0m0d3l/of\";\n\n/**\n * @name fileTruncate\n * @description Truncate a file to a specified length\n * @since 0.0.6\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @param {number=0} length\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileTruncate(pathToFile, length = 0) {\n  const fsError = await OF.ofError(promises.truncate(pathToFile, length));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import dirIsExecutable from \"./core/dir/dirIsExecutable.mjs\";\nimport dirIsReadable from \"./core/dir/dirIsReadable.mjs\";\nimport dirIsVisible from \"./core/dir/dirIsVisible.mjs\";\nimport dirIsWritable from \"./core/dir/dirIsWritable.mjs\";\n\nimport fileIsExecutable from \"./core/file/fileIsExecutable.mjs\";\nimport fileIsReadable from \"./core/file/fileIsReadable.mjs\";\nimport fileIsVisible from \"./core/file/fileIsVisible.mjs\";\nimport fileIsWritable from \"./core/file/fileIsWritable.mjs\";\n\nimport fileTruncate from \"./core/file/fileTruncate.mjs\";\n\nclass HileSystemLocal {\n  /**\n   * @name dirIsExecutable\n   * @description Directory can be executed by the calling process\n   * @since 0.0.5\n   * @async\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsExecutable = dirIsExecutable;\n  /**\n   * @name dirIsReadable\n   * @description Directory is visible to the calling process\n   * @since 0.0.1\n   * @async\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsReadable = dirIsReadable;\n  /**\n   * @name dirIsVisible\n   * @description Directory is visible to the calling process\n   * @since 0.0.5\n   * @async\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsVisible = dirIsVisible;\n  /**\n   * @name dirIsWritable\n   * @description Directory can be written by the calling process\n   * @since 0.0.1\n   * @async\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsWritable = dirIsWritable;\n  /**\n   * @name fileIsExecutable\n   * @description File can be executed by the calling process\n   * @since 0.0.5\n   * @async\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsExecutable = fileIsExecutable;\n  /**\n   * @name fileIsReadable\n   * @description File is visible to the calling process\n   * @since 0.0.1\n   * @async\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsReadable = fileIsReadable;\n  /**\n   * @name fileIsVisible\n   * @description File is visible to the calling process\n   * @since 0.0.5\n   * @async\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsVisible = fileIsVisible;\n  /**\n   * @name fileIsWritable\n   * @description File can be written by the calling process\n   * @since 0.0.1\n   * @async\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsWritable = fileIsWritable;\n  /**\n   * @name fileTruncate\n   * @description Truncate a file to a specified length\n   * @since 0.0.6\n   * @async\n   * @param {string|Buffer|URL} pathToFile\n   * @param {number=0} length\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileTruncate = fileTruncate;\n}\n\nexport {\n  HileSystemLocal,\n  dirIsExecutable,\n  dirIsReadable,\n  dirIsVisible,\n  dirIsWritable,\n  fileIsExecutable,\n  fileIsReadable,\n  fileIsVisible,\n  fileIsWritable,\n  fileTruncate,\n};\n"],"names":["async","accessWrapper","mode","path","fsError","OF","ofError","fs","access","dirIsExecutable","pathToDir","constants","X_OK","dirIsReadable","R_OK","dirIsVisible","F_OK","dirIsWritable","W_OK","fileIsExecutable","pathToFile","fileIsReadable","fileIsVisible","fileIsWritable","fileTruncate","length","promises","truncate","HileSystemLocal"],"mappings":"iNAaeA,eAAeC,cAAcC,EAAMC,SAC1CC,QAAgBC,EAAGC,QAAQC,EAAYC,OAAOL,EAAMD,WACrDE,IACI,ECJIJ,eAAeS,gBAAgBC,UACrCT,cAAcU,EAAUC,KAAMF,GCDxBV,eAAea,cAAcH,UACnCT,cAAcU,EAAUG,KAAMJ,GCDxBV,eAAee,aAAaL,UAClCT,cAAcU,EAAUK,KAAMN,GCDxBV,eAAeiB,cAAcP,UACnCT,cAAcU,EAAUO,KAAMR,GCDxBV,eAAemB,iBAAiBC,UACtCnB,cAAcU,EAAUC,KAAMQ,GCDxBpB,eAAeqB,eAAeD,UACpCnB,cAAcU,EAAUG,KAAMM,GCDxBpB,eAAesB,cAAcF,UACnCnB,cAAcU,EAAUK,KAAMI,GCDxBpB,eAAeuB,eAAeH,UACpCnB,cAAcU,EAAUO,KAAME,GCAxBpB,eAAewB,aAAaJ,EAAYK,EAAS,SACxDrB,QAAgBC,EAAGC,QAAQoB,EAASC,SAASP,EAAYK,WAC1DrB,IACI,ECJX,MAAMwB,iCAAAA,kCASqBnB,iCATrBmB,gCAkBmBf,+BAlBnBe,+BA2BkBb,8BA3BlBa,gCAoCmBX,+BApCnBW,mCA6CsBT,kCA7CtBS,iCAsDoBP,gCAtDpBO,gCA+DmBN,+BA/DnBM,iCAwEoBL,gCAxEpBK,+BAkFkBJ"}