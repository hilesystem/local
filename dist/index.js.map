{"version":3,"file":"index.js","sources":["../src/core/create/createDirectory.js","../src/core/status/getStatus.js","../src/core/write/writeFile.js","../src/core/create/createFile.js","../src/core/list/is-system-junk.js","../src/core/list/is-not-system-junk.js","../src/core/list/contents.js","../src/core/dir/dirIsEmpty.js","../src/core/access/wrapper.js","../src/core/dir/dirIsExecutable.js","../src/core/dir/dirIsReadable.js","../src/core/dir/dirIsVisible.js","../src/core/dir/dirIsWritable.js","../src/core/info/hash.js","../src/core/info/hash-crc32.js","../src/core/info/hash-md5.js","../src/core/info/hash-sha1.js","../src/core/info/hash-sha256.js","../src/core/info/hash-sha512.js","../src/core/info/size.js","../src/core/file/fileIsExecutable.js","../src/core/file/fileIsReadable.js","../src/core/file/fileIsVisible.js","../src/core/file/fileIsWritable.js","../src/core/file/fileTruncate.js","../src/core/path/pathFrom.js","../src/core/list/directories.js","../src/core/list/files.js","../src/core/move/move.js","../src/core/path/absolutePath.js","../src/core/path/absolutePathFrom.js","../src/core/path/fileExtension.js","../src/core/path/fileName.js","../src/core/path/fileNameExt.js","../src/core/path/filePath.js","../src/core/read/readFileToBase64.js","../src/core/read/readFileToBuffer.js","../src/core/read/readFileToString.js","../src/core/remove/remove.js","../src/core/remove/removeNonBlocking.js","../src/core/remove/removeSilent.js","../src/core/status/isDirExists.js","../src/core/status/isFileExists.js","../src/core/status/isPathExists.js","../src/core/write/writeFileTail.js","../src/core/write/writeJSON.js","../src/core/HileSystemLocal.js"],"sourcesContent":["import { promises } from \"fs\";\n\nimport { ofError } from \"@await-of/of\";\n\n/**\n * @name createDirectory\n * @description Asynchronous create a directory.\n * @since 0.0.10\n * @async\n * @param {string|Buffer|URL} dirPath\n * @param {number|string=} mode\n * @param {boolean=} recursive\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function createDirectory(dirPath, mode = \"0777\", recursive = true) {\n  const dirError = await ofError(promises.mkdir(dirPath, { mode, recursive }));\n  if (dirError) {\n    return dirError;\n  }\n  return true;\n}\n","import { promises } from \"fs\";\n\nimport { of } from \"@await-of/of\";\n\n/**\n * @name getStatus\n * @description Get file status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<Array.<(object|undefined|Error|{name: string, message: string, stack?: string})>>}\n */\nexport async function getStatus(path) {\n  return of(promises.stat(path));\n}\n","import { promises } from \"fs\";\n\nimport { ofError } from \"@await-of/of\";\n\n/**\n * @name writeFile\n * @description Asynchronously writes data to a file, replacing the file if it already exists.\n * @since 0.0.10\n * @async\n * @param {string|Buffer|URL} filePath\n * @param {string} data\n * @param {*|null|string=} options\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n * @example\n * const controller = new AbortController();\n * const { signal } = controller;\n * const data = new Uint8Array(Buffer.from('Hello Node.js'));\n * (async () => {\n *  try {\n *     await writeFile('message.txt', data, { signal });\n *   } catch (error) {\n *     // When a request is aborted - error is an AbortError\n *   }\n * })();\n * // When the request should be aborted\n * controller.abort();\n */\nexport async function writeFile(filePath, data, options) {\n  const writeError = await ofError(promises.writeFile(filePath, data, options));\n  if (writeError) {\n    return writeError;\n  }\n  return true;\n}\n","import { dirname } from \"path\";\nimport { promises } from \"fs\";\n\nimport { ofError } from \"@await-of/of\";\n\nimport { createDirectory } from \"./createDirectory.js\";\nimport { getStatus } from \"../status/getStatus.js\";\nimport { writeFile } from \"../write/writeFile.js\";\n\n/**\n * @name createFile\n * @description Asynchronous create a file.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} pathLike\n * @param {number|string=} mode\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function createFile(pathLike, mode = \"0777\") {\n  const [status, error] = await getStatus(pathLike);\n  if (!error && status.isFile()) {\n    return true;\n  }\n  const dirPath = dirname(pathLike);\n  if (error) {\n    if (error.code === \"ENOENT\") {\n      const dirCreated = await createDirectory(dirPath, mode);\n      if (dirCreated !== true) {\n        return dirCreated;\n      }\n      const fileWritten = await writeFile(pathLike, \"\", { mode, flag: \"w\" });\n      if (fileWritten !== true) {\n        return fileWritten;\n      }\n      return true;\n    }\n  }\n  if (status.isDirectory()) {\n    return await writeFile(pathLike, \"\", { mode, flag: \"w\" });\n  } else {\n    return await ofError(promises.readdir(dirPath));\n  }\n}\n","// keep updated https://github.com/sindresorhus/junk\n\nconst ignoreList = [\n  // # All\n  \"^npm-debug\\\\.log$\", // Error log for npm\n  \"^\\\\..*\\\\.swp$\", // Swap file for vim state\n\n  // # macOS\n  \"^\\\\.DS_Store$\", // Stores custom folder attributes\n  \"^\\\\.AppleDouble$\", // Stores additional file resources\n  \"^\\\\.LSOverride$\", // Contains the absolute path to the app to be used\n  \"^Icon\\\\r$\", // Custom Finder icon: http://superuser.com/questions/298785/icon-file-on-os-x-desktop\n  \"^\\\\._.*\", // Thumbnail\n  \"^\\\\.Spotlight-V100(?:$|\\\\/)\", // Directory that might appear on external disk\n  \"\\\\.Trashes\", // File that might appear on external disk\n  \"^__MACOSX$\", // Resource fork\n\n  // # Linux\n  \"~$\", // Backup file\n\n  // # Windows\n  \"^Thumbs\\\\.db$\", // Image file cache\n  \"^ehthumbs\\\\.db$\", // Folder config file\n  \"^Desktop\\\\.ini$\", // Stores custom folder attributes\n  \"@eaDir$\", // Synology Diskstation \"hidden\" folder where the server stores thumbnails\n  \"^\\\\$RECYCLE.BIN$\", // Special folder with columns like Date deleted and Original location\n  \"^System Volume Information$\",\n];\n\nexport const junkRegex = new RegExp(ignoreList.join(\"|\"));\n\n/**\n * @name isSystemJunk\n * @description Returns true if filename matches a system junk file.\n * @param {string} [fileName]\n * @returns {boolean}\n * @since 0.2.0\n */\nexport function isSystemJunk(fileName) {\n  return junkRegex.test(fileName);\n}\n","import { isSystemJunk } from \"./is-system-junk.js\";\n\n/**\n * @name isNotSystemJunk\n * @description Returns true if filename matches a system junk file.\n * @param {string} [fileName]\n * @returns {boolean}\n * @since 0.2.0\n */\nexport function isNotSystemJunk(fileName) {\n  return !isSystemJunk(fileName);\n}\n","import { promises } from \"fs\";\n\nimport { ofAny } from \"@await-of/of\";\n\nimport { isNotSystemJunk } from \"./is-not-system-junk.js\";\n\n/**\n * @name listContents\n * @description Lists files and directories in path\n * @since 0.1.32\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @param {boolean} [ignoreJunk=true]\n * @returns {Promise<Array.<string>|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function listContents(pathToDir, ignoreJunk = true) {\n  const [contents, fsError] = await ofAny(promises.readdir(pathToDir));\n  if (fsError) {\n    return fsError;\n  }\n  if (ignoreJunk) {\n    return contents.filter(isNotSystemJunk);\n  }\n  return contents;\n}\n","import { listContents } from \"../list/contents.js\";\n\nconst EXCLUDE = [\n  // macOS\n  \".AppleDB\",\n  \".AppleDesktop\",\n  \".AppleDouble\",\n  \".DS_Store\",\n  \".DocumentRevisions-V100\",\n  \".LSOverride\",\n  \".Spotlight-V100\",\n  \".TemporaryItems\",\n  \".Trashes\",\n  \".VolumeIcon.icns\",\n  // \"._*\",\n  \".apdisk\",\n  \".com.apple.timemachine.donotpresent\",\n  \".fseventsd\",\n  \"Network Trash Folder\",\n  \"Temporary Items\",\n  // Windows\n  \"$RECYCLE.BIN/\",\n  // \"*.cab\",\n  // \"*.lnk\",\n  // \"*.msi\",\n  // \"*.msix\",\n  // \"*.msm\",\n  // \"*.msp\",\n  // \"*.stackdump\",\n  \"Desktop.ini\",\n  \"Thumbs.db\",\n  \"Thumbs.db:encryptable\",\n  \"desktop.ini\",\n  \"ehthumbs.db\",\n  \"ehthumbs_vista.db\",\n  // Linux\n  // \"*~\",\n  // \".Trash-*\",\n  \".directory\",\n  // \".fuse_hidden*\",\n  // \".nfs*\",\n];\n\n/**\n * @name dirIsEmpty\n * @description Check if a directory is empty\n * @since 0.1.33\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @param {boolean=} excludeSystemFiles\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function dirIsEmpty(pathToDir, excludeSystemFiles = true) {\n  let contents = await listContents(pathToDir);\n  if (!Array.isArray(contents)) {\n    return contents;\n  }\n  if (contents.length === 0) {\n    return true;\n  }\n  if (!excludeSystemFiles) {\n    return false;\n  }\n  for (let contentIndex = 0; contentIndex < contents.length; contentIndex += 1) {\n    for (let excludeIndex = 0; excludeIndex < EXCLUDE.length; excludeIndex += 1) {\n      if (!contents[contentIndex]) {\n        continue;\n      }\n      if (\n        contents[contentIndex] === EXCLUDE[excludeIndex] ||\n        contents[contentIndex].match(RegExp(EXCLUDE[excludeIndex]))\n      ) {\n        delete contents[contentIndex];\n        contents = contents.filter((content) => content);\n      }\n    }\n  }\n  return contents.length === 0;\n}\n","import { promises } from \"fs\";\n\nimport { ofError } from \"@await-of/of\";\n\n/**\n * @name accessWrapper\n * @description Asynchronously tests a user's permissions for the file specified by path.\n * @since 0.0.1\n * @async\n * @param {number} mode\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function accessWrapper(mode, path) {\n  const fsError = await ofError(promises.access(path, mode));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.js\";\n\n/**\n * @name dirIsExecutable\n * @description Directory can be executed by the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function dirIsExecutable(pathToDir) {\n  return accessWrapper(constants.X_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.js\";\n\n/**\n * @name dirIsReadable\n * @description Directory is visible to the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function dirIsReadable(pathToDir) {\n  return accessWrapper(constants.R_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.js\";\n\n/**\n * @name dirIsVisible\n * @description Directory is visible to the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function dirIsVisible(pathToDir) {\n  return accessWrapper(constants.F_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.js\";\n\n/**\n * @name dirIsWritable\n * @description Directory can be written by the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function dirIsWritable(pathToDir) {\n  return accessWrapper(constants.W_OK, pathToDir);\n}\n","import { createHash, getHashes } from \"crypto\";\nimport { promises } from \"fs\";\n\n/**\n * @name hash\n * @description Calculate hash.\n * @since 0.2.3\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @param {string} algorithm\n * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n * @throws {TypeError} If algorithm is not supported.\n */\nexport async function hash(pathToFile, algorithm) {\n  if (!getHashes().includes(algorithm)) {\n    throw new TypeError(`Digest algorithm [${algorithm}] is not supported.`);\n  }\n  return createHash(algorithm)\n    .update(await promises.readFile(pathToFile))\n    .digest(\"hex\");\n}\n","import { promises } from \"fs\";\n\nfunction crc32(text) {\n  let chars = [];\n  let actual;\n  for (let current = 0; current < 256; current++) {\n    actual = current;\n    for (let f = 0; f < 8; f++) {\n      actual = 1 & actual ? 3988292384 ^ (actual >>> 1) : actual >>> 1;\n    }\n    chars[current] = actual;\n  }\n  let number = -1;\n  let index = 0;\n  for (; index < text.length; index++) {\n    number = (number >>> 8) ^ chars[255 & (number ^ text.charCodeAt(index))];\n  }\n  return (-1 ^ number) >>> 0;\n}\n\n/**\n * @name hashCrc32\n * @description CRC32.\n * @since 0.2.3\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function hashCrc32(pathToFile) {\n  return crc32((await promises.readFile(pathToFile)).toString(\"binary\")).toString(16);\n}\n","import { hash } from \"./hash.js\";\n\n/**\n * @name hashMd5\n * @description MD5.\n * @since 0.2.3\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function hashMd5(pathToFile) {\n  return hash(pathToFile, \"md5\");\n}\n","import { hash } from \"./hash.js\";\n\n/**\n * @name hashSha1\n * @description SHA-1.\n * @since 0.2.3\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function hashSha1(pathToFile) {\n  return hash(pathToFile, \"sha1\");\n}\n","import { hash } from \"./hash.js\";\n\n/**\n * @name hashSha256\n * @description SHA-256.\n * @since 0.2.3\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function hashSha256(pathToFile) {\n  return hash(pathToFile, \"sha256\");\n}\n","import { hash } from \"./hash.js\";\n\n/**\n * @name hashSha512\n * @description SHA-512.\n * @since 0.2.6\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function hashSha512(pathToFile) {\n  return hash(pathToFile, \"sha512\");\n}\n","import { promises } from \"fs\";\n\n/**\n * @name size\n * @description File size in bytes.\n * @since 0.2.3\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @param {boolean=} [asString=false]\n * @returns {Promise<number|string|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function size(pathToFile, asString = false) {\n  const fileStats = await promises.stat(pathToFile);\n  if (!asString) {\n    return fileStats.size;\n  }\n  return fileStats.size.toLocaleString(\"en\").replace(/,/g, \"_\");\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.js\";\n\n/**\n * @name fileIsExecutable\n * @description File can be executed by the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function fileIsExecutable(pathToFile) {\n  return accessWrapper(constants.X_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.js\";\n\n/**\n * @name fileIsReadable\n * @description File is visible to the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function fileIsReadable(pathToFile) {\n  return accessWrapper(constants.R_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.js\";\n\n/**\n * @name fileIsVisible\n * @description File is visible to the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function fileIsVisible(pathToFile) {\n  return accessWrapper(constants.F_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.js\";\n\n/**\n * @name fileIsWritable\n * @description File can be written by the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function fileIsWritable(pathToFile) {\n  return accessWrapper(constants.W_OK, pathToFile);\n}\n","import { promises } from \"fs\";\n\nimport { ofError } from \"@await-of/of\";\n\n/**\n * @name fileTruncate\n * @description Truncate a file to a specified length\n * @since 0.0.6\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @param {number=} length\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function fileTruncate(pathToFile, length = 0) {\n  const fsError = await ofError(promises.truncate(pathToFile, length));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import { join, normalize } from \"path\";\n\n/**\n * @name pathFrom\n * @description Join all arguments together and normalize the resulting path.\n * @since 0.1.3\n * @param {string|Array.<string>} paths\n * @param {...string} morePaths\n * @returns {string}\n */\nexport function pathFrom(paths, ...morePaths) {\n  let routes;\n  if (Array.isArray(paths)) {\n    routes = paths.map((path) => path.toString());\n  } else {\n    routes = [paths.toString()];\n  }\n  if (morePaths.length) {\n    routes = routes.concat(morePaths.map((path) => path.toString()));\n  }\n  return normalize(join(...routes));\n}\n","import { getStatus } from \"../status/getStatus.js\";\nimport { listContents } from \"./contents.js\";\nimport { pathFrom } from \"../path/pathFrom.js\";\n\n/**\n * @name listDirectories\n * @description Lists directories in path\n * @since 0.1.32\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<Array.<string>|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function listDirectories(pathToDir) {\n  const contents = await listContents(pathToDir);\n  if (!Array.isArray(contents)) {\n    return contents;\n  }\n  const directories = await Promise.all(\n    contents.map(async (content) => {\n      const contentPath = pathFrom(pathToDir, content);\n      const [status, error] = await getStatus(contentPath);\n      if (error) {\n        return undefined;\n      }\n      if (!status.isDirectory()) {\n        return undefined;\n      }\n      return content;\n    }),\n  );\n  return directories.filter((content) => content);\n}\n","import { getStatus } from \"../status/getStatus.js\";\nimport { listContents } from \"./contents.js\";\nimport { pathFrom } from \"../path/pathFrom.js\";\n\n/**\n * @name listFiles\n * @description Lists files in path\n * @since 0.1.32\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<Array.<string>|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function listFiles(pathToDir) {\n  const contents = await listContents(pathToDir);\n  if (!Array.isArray(contents)) {\n    return contents;\n  }\n  const files = await Promise.all(\n    contents.map(async (content) => {\n      const contentPath = pathFrom(pathToDir, content);\n      const [status, error] = await getStatus(contentPath);\n      if (error) {\n        return undefined;\n      }\n      if (status.isDirectory()) {\n        return undefined;\n      }\n      return content;\n    }),\n  );\n  return files.filter((content) => content);\n}\n","import { promises } from \"fs\";\n\nimport { ofError } from \"@await-of/of\";\n\n/**\n * @name move\n * @description Change the name or location of a file or directory.\n * @since 0.1.29\n * @param {string} pathFrom\n * @param {string} pathTo\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function move(pathFrom, pathTo) {\n  const errorRename = await ofError(promises.rename(pathFrom, pathTo));\n  if (errorRename) {\n    return errorRename;\n  }\n  return true;\n}\n","import os from \"os\";\n\nconst HOME_DIRECTORY = os.homedir();\n\n/**\n * @description deConvert a tilde path to an absolute path: ~/projects → /Users/anon/projects\n * @param {string} pathWithTilde\n * @returns {string}\n */\nexport function absolutePath(pathWithTilde) {\n  if (HOME_DIRECTORY) {\n    return String(pathWithTilde).replace(/^~(?=$|\\/|\\\\)/, HOME_DIRECTORY);\n  }\n  return String(pathWithTilde);\n}\n","import { resolve } from \"path\";\n\nimport { absolutePath } from \"./absolutePath.js\";\n\n/**\n * @name absolutePathFrom\n * @description Join all arguments together and normalize the resulting path.\n * Creates absolute path from right to left until an absolute path is constructed.\n * @since 0.1.5\n * @param {string|Array.<string>} paths\n * @param {...string} morePaths\n * @returns {string}\n */\nexport function absolutePathFrom(paths, ...morePaths) {\n  let routes;\n  if (Array.isArray(paths)) {\n    routes = paths.map((path) => path.toString());\n  } else {\n    routes = [paths.toString()];\n  }\n  if (morePaths.length) {\n    routes = routes.concat(morePaths.map((path) => path.toString()));\n  }\n  return absolutePath(resolve(...routes));\n}\n","import { extname } from \"path\";\n\n/**\n * @name fileExtension\n * @description Get file extension.\n * @since 0.1.1\n * @param {string} path\n * @returns {string}\n */\nexport function fileExtension(path) {\n  return extname(path).substring(1);\n}\n","import { parse } from \"path\";\n\n/**\n * @name fileName\n * @description Return the file name without extension.\n * @since 0.1.1\n * @param {string} path\n * @returns {string}\n */\nexport function fileName(path) {\n  return parse(path).name;\n}\n","import { basename } from \"path\";\n\n/**\n * @name fileNameExt\n * @description Return the last portion of a path.\n * @since 0.1.1\n * @param {string} path\n * @returns {string}\n */\nexport function fileNameExt(path) {\n  return basename(path);\n}\n","import { dirname } from \"path\";\n\n/**\n * @name filePath\n * @description Return the directory name of a path.\n * @since 0.1.1\n * @param {string} path\n * @returns {string}\n */\nexport function filePath(path) {\n  return dirname(path);\n}\n","import { promises } from \"fs\";\n\nimport { of } from \"@await-of/of\";\n\n/**\n * @name readFileToBase64\n * @description Asynchronously reads the entire contents of a file into string.\n * @since 0.1.21\n * @async\n * @param {string|Buffer|URL} pathLike\n * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function readFileToBase64(pathLike) {\n  const [result, error] = await of(promises.readFile(pathLike, \"base64\"));\n  if (error) {\n    return error;\n  }\n  return result.toString();\n}\n","import { promises } from \"fs\";\n\nimport { of } from \"@await-of/of\";\n\n/**\n * @name readFileToBuffer\n * @description Asynchronously reads the entire contents of a file into buffer.\n * @since 0.1.19\n * @async\n * @param {string|Buffer|URL} pathLike\n * @returns {Promise<Buffer|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function readFileToBuffer(pathLike) {\n  const [result, error] = await of(promises.readFile(pathLike, \"binary\"));\n  if (error) {\n    return error;\n  }\n  return Buffer.from(result);\n}\n","import { promises } from \"fs\";\n\nimport { of } from \"@await-of/of\";\n\nimport { absolutePath } from \"../path/absolutePath.js\";\n\n/**\n * @name readFileToString\n * @description Asynchronously reads the entire contents of a file into string.\n * @since 0.1.7\n * @async\n * @param {string|Buffer|URL} pathLike\n * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function readFileToString(pathLike) {\n  const [result, error] = await of(promises.readFile(absolutePath(pathLike), \"utf8\"));\n  if (error) {\n    return error;\n  }\n  return result.toString();\n}\n","import fs from \"fs\";\nimport assert from \"assert\";\nimport { join } from \"path\";\n\nconst IS_WINDOWS = process.platform === \"win32\";\n\n/**\n * @param {object} options\n */\nfunction defaults(options) {\n  const methods = [\"unlink\", \"chmod\", \"stat\", \"lstat\", \"rmdir\", \"readdir\"];\n  methods.forEach((method) => {\n    options[method] = options[method] || fs[method];\n  });\n  options.maxBusyTries = options.maxBusyTries || 3;\n}\n\n/**\n * @param {string} pathLike\n * @param {Function|object=} options\n * @param {Function=} callback\n */\nfunction rimraf(pathLike, options, callback) {\n  let busyTries = 0;\n  let localCallback = callback;\n  let localOptions = options;\n  if (typeof localOptions === \"function\") {\n    localCallback = localOptions;\n    localOptions = {};\n  }\n  assert(pathLike, \"remove(): missing path\");\n  assert.strictEqual(typeof pathLike, \"string\", \"remove(): path should be a string\");\n  assert.strictEqual(typeof localCallback, \"function\", \"remove(): callback function required\");\n  assert(localOptions, \"remove(): invalid options argument provided\");\n  assert.strictEqual(typeof localOptions, \"object\", \"remove(): options should be object\");\n  defaults(localOptions);\n  rimraf_(pathLike, localOptions, function callbackRimraf(error) {\n    if (error) {\n      if (\n        (error.code === \"EBUSY\" || error.code === \"ENOTEMPTY\" || error.code === \"EPERM\") &&\n        busyTries < localOptions.maxBusyTries\n      ) {\n        busyTries++;\n        const time = busyTries * 100;\n        setTimeout(() => rimraf_(pathLike, localOptions, callbackRimraf), time);\n        return;\n      }\n      if (error.code === \"ENOENT\") {\n        localCallback(null);\n        return;\n      }\n    }\n    localCallback(error);\n  });\n}\n\n/**\n * @param {string} pathLike\n * @param {Function|object=} options\n * @param {Function=} callback\n */\nfunction rimraf_(pathLike, options, callback) {\n  assert(pathLike);\n  assert(options);\n  assert(typeof callback === \"function\");\n  options.lstat(pathLike, (error, stats) => {\n    if (error && error.code === \"ENOENT\") {\n      return callback(null);\n    }\n    if (error && error.code === \"EPERM\" && IS_WINDOWS) {\n      return fixWinEPERM(pathLike, options, error, callback);\n    }\n    if (stats && stats.isDirectory()) {\n      return rmdir(pathLike, options, error, callback);\n    }\n    options.unlink(pathLike, (error) => {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          return callback(null);\n        }\n        if (error.code === \"EPERM\") {\n          if (IS_WINDOWS) {\n            return fixWinEPERM(pathLike, options, error, callback);\n          } else {\n            return rmdir(pathLike, options, error, callback);\n          }\n        }\n        if (error.code === \"EISDIR\") {\n          return rmdir(pathLike, options, error, callback);\n        }\n      }\n      return callback(error);\n    });\n  });\n}\n\n/**\n * @param {string} pathLike\n * @param {Function|object=} options\n * @param {Error|null} error\n * @param {Function=} callback\n * @returns {null}\n */\nfunction fixWinEPERM(pathLike, options, error, callback) {\n  assert(pathLike);\n  assert(options);\n  assert(typeof callback === \"function\");\n  if (error) {\n    assert(error instanceof Error);\n  }\n  options.chmod(pathLike, 0o666, (errorChMod) => {\n    if (errorChMod) {\n      if (errorChMod.code === \"ENOENT\") {\n        callback(null);\n      } else {\n        callback(error);\n      }\n    } else {\n      options.stat(pathLike, (errorStat, stats) => {\n        if (errorStat) {\n          if (errorStat.code === \"ENOENT\") {\n            callback(null);\n          } else {\n            callback(error);\n          }\n        } else if (stats.isDirectory()) {\n          rmdir(pathLike, options, error, callback);\n        } else {\n          options.unlink(pathLike, callback);\n        }\n      });\n    }\n  });\n  return null;\n}\n\n/**\n * @param {string} pathLike\n * @param {Function|object=} options\n * @param {Error|null} originalError\n * @param {Function=} callback\n * @returns {null}\n */\nfunction rmdir(pathLike, options, originalError, callback) {\n  assert(pathLike);\n  assert(options);\n  if (originalError) {\n    assert(originalError instanceof Error);\n  }\n  assert(typeof callback === \"function\");\n  options.rmdir(pathLike, (error) => {\n    if (error && (error.code === \"ENOTEMPTY\" || error.code === \"EEXIST\" || error.code === \"EPERM\")) {\n      removeSubPath(pathLike, options, callback);\n    } else if (error && error.code === \"ENOTDIR\") {\n      callback(originalError);\n    } else {\n      callback(error);\n    }\n  });\n  return null;\n}\n\n/**\n * @param {string} pathLike\n * @param {Function|object=} options\n * @param {Function=} callback\n */\nfunction removeSubPath(pathLike, options, callback) {\n  assert(pathLike);\n  assert(options);\n  assert(typeof callback === \"function\");\n  options.readdir(pathLike, (error, files) => {\n    if (error) {\n      return callback(error);\n    }\n    let count = files.length;\n    let errState;\n    if (count === 0) {\n      return options.rmdir(pathLike, callback);\n    }\n    files.forEach((filePath) => {\n      rimraf(join(pathLike, filePath), options, (error) => {\n        if (errState) {\n          return;\n        }\n        if (error) {\n          callback((errState = error));\n          return;\n        }\n        --count;\n        if (count === 0) {\n          options.rmdir(pathLike, callback);\n        }\n      });\n    });\n  });\n}\n\n/**\n * @name remove\n * @description Removes a file or directory.\n * @since 0.1.1\n * @async\n * @param {string} pathLike\n * @returns {Promise<undefined|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function remove(pathLike) {\n  return new Promise((resolve) => {\n    rimraf(pathLike, {}, (error) => {\n      if (error) {\n        resolve(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n","import { remove } from \"./remove.js\";\n\n/**\n * @name removeNonBlocking\n * @description Non-blocking remove of a file or directory.\n * @since 0.1.18\n * @param {string|Buffer|URL} pathLike\n * @returns {void}\n */\nexport function removeNonBlocking(pathLike) {\n  remove(pathLike)\n    .then(() => undefined)\n    .catch(() => undefined); // don't put it into next tick\n}\n","import { promises } from \"fs\";\n\n/**\n * @name removeSilent\n * @description Removes files and directories (modeled on the standard POSIX rm utility).\n * @summary Minimum Node version 14.14.0\n * @since 0.1.36\n * @async\n * @param {string|Buffer|URL} pathLike\n * @param {object=} options\n * @returns {Promise<void>}\n */\nexport async function removeSilent(pathLike, options) {\n  try {\n    await promises.rm(pathLike, {\n      force: true,\n      recursive: true,\n      ...options,\n    });\n  } catch (__error) {\n    //\n  }\n}\n","import { getStatus } from \"./getStatus.js\";\n\n/**\n * @name isDirExists\n * @description Get directory status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean>}\n */\nexport async function isDirExists(path) {\n  const [status, error] = await getStatus(path);\n  if (error) {\n    return false;\n  }\n  return status.isDirectory();\n}\n","import { getStatus } from \"./getStatus.js\";\n\n/**\n * @name isFileExists\n * @description Get file status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean>}\n */\nexport async function isFileExists(path) {\n  const [status, error] = await getStatus(path);\n  if (error) {\n    return false;\n  }\n  return status.isFile();\n}\n","import { getStatus } from \"./getStatus.js\";\n\n/**\n * @name isPathExists\n * @description Get path status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean>}\n */\nexport async function isPathExists(path) {\n  const [status] = await getStatus(path);\n  return Boolean(status);\n}\n","import { createFile } from \"../create/createFile.js\";\nimport { isFileExists } from \"../status/isFileExists.js\";\nimport { readFileToString } from \"../read/readFileToString.js\";\nimport { writeFile } from \"./writeFile.js\";\n\n/**\n * @name writeFileTail\n * @description Asynchronously writes data to the end of a file.\n * @since 1.0.1\n * @async\n * @param {string|Buffer|URL} filePath\n * @param {string} data\n * @param {*|null|string=} options\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function writeFileTail(filePath, data, options) {\n  const isFileExist = await isFileExists(filePath);\n  if (isFileExist === false) {\n    const isFileCreatedOrError = await createFile(filePath);\n    if (isFileCreatedOrError !== true) {\n      return isFileCreatedOrError;\n    }\n  }\n  const contentOrError = await readFileToString(filePath);\n  if (contentOrError instanceof Error) {\n    return contentOrError;\n  }\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      writeFile(filePath, `${String(contentOrError)}${String(data)}`, options)\n        .then(() => {\n          resolve(true);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    }, 1);\n  });\n}\n","import { writeFile } from \"./writeFile.js\";\n\n/**\n * @name objectKeys\n * @param {object} object\n * @returns {Array.<string>}\n */\nfunction objectKeys(object) {\n  return Object.keys(object).sort((alpha, beta) => alpha.localeCompare(beta));\n}\n\n/**\n * name isObjectLike\n * @param {*} value\n * @returns {boolean}\n */\nfunction isObjectLike(value) {\n  return value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\n/**\n * @name collectionSortKeys\n * @param {*} value\n * @param {boolean=} [isDeep=true]\n * @returns {*}\n */\nfunction collectionSortKeys(value, isDeep = true) {\n  if (!isObjectLike(value)) {\n    if (Array.isArray(value)) {\n      return value.map((arrayValue) => collectionSortKeys(arrayValue, isDeep));\n    }\n    return value;\n  }\n  const keys = objectKeys(value);\n  if (!keys.length) {\n    return value;\n  }\n  return keys.reduce((sorted, key) => {\n    if (isDeep && isObjectLike(value[key])) {\n      sorted[key] = collectionSortKeys(value[key], isDeep);\n    } else if (isDeep && Array.isArray(value[key])) {\n      sorted[key] = collectionSortKeys(value[key], isDeep);\n    } else {\n      sorted[key] = value[key];\n    }\n    return sorted;\n  }, {});\n}\n\n/**\n * @name writeJSON\n * @description Asynchronously writes data to a file, replacing the file if it already exists.\n * @since 0.1.25\n * @async\n * @param {string|Buffer|URL} filePath\n * @param {*} data\n * @param {*|null|string=} options\n * @param {{sort: boolean, space: number|string}=} configuration\n * @returns {Promise<boolean|Error|{name: string, message: string, stack: string}>}\n */\nexport async function writeJSON(filePath, data, options, configuration) {\n  let json;\n  let stringify = data;\n  try {\n    if (configuration) {\n      if (configuration.sort) {\n        if (isObjectLike(data)) {\n          stringify = collectionSortKeys(JSON.parse(JSON.stringify(data)));\n        } else if (Array.isArray(data)) {\n          stringify = JSON.parse(JSON.stringify(data));\n        } else {\n          stringify = data;\n        }\n      }\n      if (configuration.space) {\n        json = JSON.stringify(stringify, null, configuration.space);\n      }\n    } else {\n      json = JSON.stringify(stringify);\n    }\n  } catch (error) {\n    return error;\n  }\n  return writeFile(filePath, json, options);\n}\n","import { absolutePathFrom } from \"./path/absolutePathFrom.js\";\nimport { createDirectory } from \"./create/createDirectory.js\";\nimport { createFile } from \"./create/createFile.js\";\nimport { dirIsExecutable } from \"./dir/dirIsExecutable.js\";\nimport { dirIsReadable } from \"./dir/dirIsReadable.js\";\nimport { dirIsVisible } from \"./dir/dirIsVisible.js\";\nimport { dirIsWritable } from \"./dir/dirIsWritable.js\";\nimport { dirIsEmpty } from \"./dir/dirIsEmpty.js\";\nimport { fileExtension } from \"./path/fileExtension.js\";\nimport { fileIsExecutable } from \"./file/fileIsExecutable.js\";\nimport { fileIsReadable } from \"./file/fileIsReadable.js\";\nimport { fileIsVisible } from \"./file/fileIsVisible.js\";\nimport { fileIsWritable } from \"./file/fileIsWritable.js\";\nimport { fileName } from \"./path/fileName.js\";\nimport { fileNameExt } from \"./path/fileNameExt.js\";\nimport { filePath } from \"./path/filePath.js\";\nimport { fileTruncate } from \"./file/fileTruncate.js\";\nimport { listContents } from \"./list/contents.js\";\nimport { listDirectories } from \"./list/directories.js\";\nimport { listFiles } from \"./list/files.js\";\nimport { getStatus } from \"./status/getStatus.js\";\nimport { isDirExists } from \"./status/isDirExists.js\";\nimport { isFileExists } from \"./status/isFileExists.js\";\nimport { isPathExists } from \"./status/isPathExists.js\";\nimport { move } from \"./move/move.js\";\nimport { pathFrom } from \"./path/pathFrom.js\";\nimport { readFileToBase64 } from \"./read/readFileToBase64.js\";\nimport { readFileToBuffer } from \"./read/readFileToBuffer.js\";\nimport { readFileToString } from \"./read/readFileToString.js\";\nimport { remove } from \"./remove/remove.js\";\nimport { removeNonBlocking } from \"./remove/removeNonBlocking.js\";\nimport { removeSilent } from \"./remove/removeSilent.js\";\nimport { writeFile } from \"./write/writeFile.js\";\nimport { writeFileTail } from \"./write/writeFileTail.js\";\nimport { writeJSON } from \"./write/writeJSON.js\";\n\nimport { hash } from \"./info/hash.js\";\nimport { hashCrc32 } from \"./info/hash-crc32.js\";\nimport { hashMd5 } from \"./info/hash-md5.js\";\nimport { hashSha1 } from \"./info/hash-sha1.js\";\nimport { hashSha256 } from \"./info/hash-sha256.js\";\nimport { hashSha512 } from \"./info/hash-sha512.js\";\nimport { size } from \"./info/size.js\";\n\nexport class HileSystemLocal {\n  /**\n   * @name absolutePathFrom\n   * @description Join all arguments together and normalize the resulting path.\n   * reates absolute path from right to left until an absolute path is constructed.\n   * @since 0.1.5\n   * @public\n   * @param {string|Array.<string>} paths\n   * @param {...string} morePaths\n   * @returns {string}\n   */\n  absolutePathFrom = absolutePathFrom;\n  /**\n   * @name createDirectory\n   * @description Asynchronous create a directory.\n   * @since 0.0.10\n   * @async\n   * @public\n   * @param {string|Buffer|URL} dirPath\n   * @param {number|string=} mode\n   * @param {boolean=} recursive\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  createDirectory = createDirectory;\n  /**\n   * @name createFile\n   * @description Asynchronous create a file.\n   * @since 0.0.11\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathLike\n   * @param {number|string=} mode\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  createFile = createFile;\n  /**\n   * @name dirIsExecutable\n   * @description Directory can be executed by the calling process\n   * @since 0.0.5\n   * @async\n   * @public\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  dirIsExecutable = dirIsExecutable;\n  /**\n   * @name dirIsReadable\n   * @description Directory is visible to the calling process\n   * @since 0.0.1\n   * @async\n   * @public\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  dirIsReadable = dirIsReadable;\n  /**\n   * @name dirIsVisible\n   * @description Directory is visible to the calling process\n   * @since 0.0.5\n   * @async\n   * @public\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  dirIsVisible = dirIsVisible;\n  /**\n   * @name dirIsWritable\n   * @description Directory can be written by the calling process\n   * @since 0.0.1\n   * @async\n   * @public\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  dirIsWritable = dirIsWritable;\n  /**\n   * @name dirIsEmpty\n   * @description Check if a directory is empty\n   * @since 0.1.33\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToDir\n   * @param {boolean=} excludeSystemFiles\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  dirIsEmpty = dirIsEmpty;\n  /**\n   * @name getStatus\n   * @description Get file status.\n   * @since 0.0.11\n   * @async\n   * @public\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<Array.<(object|undefined|Error|{name: string, message: string, stack?: string})>>}\n   */\n  getStatus = getStatus;\n  /**\n   * @name isDirExists\n   * @description Get directory status.\n   * @since 0.0.11\n   * @async\n   * @public\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<boolean>}\n   */\n  isDirExists = isDirExists;\n  /**\n   * @name isFileExists\n   * @description Get file status.\n   * @since 0.0.11\n   * @async\n   * @public\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<boolean>}\n   */\n  isFileExists = isFileExists;\n  /**\n   * @name isPathExists\n   * @description Get path status.\n   * @since 0.0.11\n   * @async\n   * @public\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<boolean>}\n   */\n  isPathExists = isPathExists;\n  /**\n   * @name fileExtension\n   * @description Get file extension.\n   * @since 0.1.1\n   * @public\n   * @param {string} path\n   * @returns {string}\n   */\n  fileExtension = fileExtension;\n  /**\n   * @name fileName\n   * @description Return the file name without extension.\n   * @since 0.1.1\n   * @public\n   * @param {string} path\n   * @returns {string}\n   */\n  fileName = fileName;\n  /**\n   * @name fileNameExt\n   * @description Return the last portion of a path.\n   * @since 0.1.1\n   * @public\n   * @param {string} path\n   * @returns {string}\n   */\n  fileNameExt = fileNameExt;\n  /**\n   * @name filePath\n   * @description Return the directory name of a path.\n   * @since 0.1.1\n   * @public\n   * @param {string} path\n   * @returns {string}\n   */\n  filePath = filePath;\n  /**\n   * @name fileIsExecutable\n   * @description File can be executed by the calling process\n   * @since 0.0.5\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  fileIsExecutable = fileIsExecutable;\n  /**\n   * @name fileIsReadable\n   * @description File is visible to the calling process\n   * @since 0.0.1\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  fileIsReadable = fileIsReadable;\n  /**\n   * @name fileIsVisible\n   * @description File is visible to the calling process\n   * @since 0.0.5\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  fileIsVisible = fileIsVisible;\n  /**\n   * @name fileIsWritable\n   * @description File can be written by the calling process\n   * @since 0.0.1\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  fileIsWritable = fileIsWritable;\n  /**\n   * @name fileTruncate\n   * @description Truncate a file to a specified length\n   * @since 0.0.6\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @param {number=} length\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  fileTruncate = fileTruncate;\n  /**\n   * @name hash\n   * @description Calculate hash.\n   * @since 0.2.3\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @param {string} algorithm\n   * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n   * @throws {TypeError} If algorithm is not supported.\n   */\n  hash = hash;\n  /**\n   * @name hashCrc32\n   * @description CRC32.\n   * @since 0.2.3\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n   */\n  hashCrc32 = hashCrc32;\n  /**\n   * @name hashMd5\n   * @description MD5.\n   * @since 0.2.3\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n   */\n  hashMd5 = hashMd5;\n  /**\n   * @name hashSha1\n   * @description SHA-1.\n   * @since 0.2.3\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n   */\n  hashSha1 = hashSha1;\n  /**\n   * @name hashSha256\n   * @description SHA-256.\n   * @since 0.2.3\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n   */\n  hashSha256 = hashSha256;\n  /**\n   * @name hashSha512\n   * @description SHA-512.\n   * @since 0.2.6\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n   */\n  hashSha512 = hashSha512;\n  /**\n   * @name listContents\n   * @description Lists files and directories in path\n   * @since 0.1.32\n   * @async\n   * @param {string|Buffer|URL} pathToDir\n   * @returns {Promise<Array.<string>|Error|{name: string, message: string, stack?: string}>}\n   */\n  listContents = listContents;\n  /**\n   * @name listDirectories\n   * @description Lists directories in path\n   * @since 0.1.32\n   * @async\n   * @param {string|Buffer|URL} pathToDir\n   * @returns {Promise<Array.<string>|Error|{name: string, message: string, stack?: string}>}\n   */\n  listDirectories = listDirectories;\n  /**\n   * @name listFiles\n   * @description Lists files in path\n   * @since 0.1.32\n   * @async\n   * @param {string|Buffer|URL} pathToDir\n   * @returns {Promise<Array.<string>|Error|{name: string, message: string, stack?: string}>}\n   */\n  listFiles = listFiles;\n  /**\n   * @name move\n   * @description Change the name or location of a file or directory.\n   * @since 0.1.29\n   * @public\n   * @param {string} pathFrom\n   * @param {string} pathTo\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  move = move;\n  /**\n   * @name pathFrom\n   * @description Join all arguments together and normalize the resulting path.\n   * @since 0.1.3\n   * @public\n   * @param {string|Array.<string>} paths\n   * @param {...string} morePaths\n   * @returns {string}\n   */\n  pathFrom = pathFrom;\n  /**\n   * @name readFileToBase64\n   * @description Asynchronously reads the entire contents of a file into string.\n   * @since 0.1.21\n   * @async\n   * @param {string|Buffer|URL} pathLike\n   * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n   */\n  readFileToBase64 = readFileToBase64;\n  /**\n   * @name readFileToBuffer\n   * @description Asynchronously reads the entire contents of a file into buffer.\n   * @since 0.1.19\n   * @async\n   * @param {string|Buffer|URL} pathLike\n   * @returns {Promise<Buffer|Error|{name: string, message: string, stack?: string}>}\n   */\n  readFileToBuffer = readFileToBuffer;\n  /**\n   * @name readFileToString\n   * @description Asynchronously reads the entire contents of a file into string.\n   * @since 0.1.7\n   * @async\n   * @param {string|Buffer|URL} pathLike\n   * @returns {Promise<string|Error|{name: string, message: string, stack?: string}>}\n   */\n  readFileToString = readFileToString;\n  /**\n   * @name remove\n   * @description Removes a file or directory.\n   * @since 0.1.1\n   * @async\n   * @public\n   * @param {string} pathLike\n   * @returns {Promise<undefined|Error|{name: string, message: string, stack?: string}>}\n   */\n  remove = remove;\n  /**\n   * @name removeNonBlocking\n   * @description Non-blocking remove of a file or directory.\n   * @since 0.1.18\n   * @public\n   * @param {string} pathLike\n   * @returns {void}\n   */\n  removeNonBlocking = removeNonBlocking;\n  /**\n   * @name removeSilent\n   * @description Removes files and directories (modeled on the standard POSIX rm utility).\n   * @summary Minimum Node version 14.14.0\n   * @since 0.1.36\n   * @async\n   * @param {string|Buffer|URL} pathLike\n   * @param {object=} options\n   * @returns {Promise<void>}\n   */\n  removeSilent = removeSilent;\n  /**\n   * @name size\n   * @description File size in bytes.\n   * @since 0.2.3\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @param {boolean=} [asString=false]\n   * @returns {Promise<number|string|Error|{name: string, message: string, stack?: string}>}\n   */\n  size = size;\n  /**\n   * @name writeFile\n   * @description Asynchronously writes data to a file, replacing the file if it already exists.\n   * @since 0.0.10\n   * @async\n   * @public\n   * @param {string|Buffer|URL} filePath\n   * @param {string} data\n   * @param {*|null|string=} options\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  writeFile = writeFile;\n  /**\n   * @name writeFileTail\n   * @description  Asynchronously writes data to the end of a file.\n   * @since 1.0.1\n   * @async\n   * @public\n   * @param {string|Buffer|URL} filePath\n   * @param {string} data\n   * @param {*|null|string=} options\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  writeFileTail = writeFileTail;\n  /**\n   * @name writeJSON\n   * @description Asynchronously writes data to a file, replacing the file if it already exists.\n   * @since 0.1.25\n   * @async\n   * @public\n   * @param {string|Buffer|URL} filePath\n   * @param {*} data\n   * @param {*|null|string=} options\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  writeJSON = writeJSON;\n}\n"],"names":["async","createDirectory","dirPath","mode","recursive","dirError","ofError","promises","mkdir","getStatus","path","of","stat","writeFile","filePath","data","options","writeError","createFile","pathLike","status","error","isFile","dirname","code","dirCreated","fileWritten","flag","isDirectory","readdir","junkRegex","RegExp","join","isNotSystemJunk","fileName","isSystemJunk","test","listContents","pathToDir","ignoreJunk","contents","fsError","ofAny","filter","EXCLUDE","dirIsEmpty","excludeSystemFiles","Array","isArray","length","contentIndex","excludeIndex","match","content","accessWrapper","access","dirIsExecutable","constants","X_OK","dirIsReadable","R_OK","dirIsVisible","F_OK","dirIsWritable","W_OK","hash","pathToFile","algorithm","getHashes","includes","TypeError","createHash","update","readFile","digest","hashCrc32","crc32","text","actual","chars","current","f","number","index","charCodeAt","toString","hashMd5","hashSha1","hashSha256","hashSha512","size","asString","fileStats","toLocaleString","replace","fileIsExecutable","fileIsReadable","fileIsVisible","fileIsWritable","fileTruncate","truncate","pathFrom","paths","morePaths","routes","map","concat","normalize","listDirectories","Promise","all","contentPath","listFiles","move","pathTo","errorRename","rename","HOME_DIRECTORY","os","homedir","absolutePath","pathWithTilde","String","absolutePathFrom","resolve","fileExtension","extname","substring","parse","name","fileNameExt","basename","readFileToBase64","result","readFileToBuffer","Buffer","from","readFileToString","IS_WINDOWS","process","platform","rimraf","callback","busyTries","localCallback","localOptions","assert","strictEqual","defaults","forEach","method","fs","maxBusyTries","rimraf_","callbackRimraf","setTimeout","lstat","stats","fixWinEPERM","rmdir","unlink","Error","chmod","errorChMod","errorStat","originalError","removeSubPath","files","errState","count","remove","removeNonBlocking","then","catch","removeSilent","rm","force","__error","isDirExists","isFileExists","isPathExists","Boolean","writeFileTail","isFileCreatedOrError","contentOrError","reject","isObjectLike","value","collectionSortKeys","isDeep","arrayValue","keys","objectKeys","object","Object","sort","alpha","beta","localeCompare","reduce","sorted","key","writeJSON","configuration","json","stringify","JSON","space","HileSystemLocal","constructor","_defineProperty"],"mappings":"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"}