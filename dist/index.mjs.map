{"version":3,"file":"index.mjs","sources":["../src/core/create/createDirectory.mjs","../src/core/status/getStatus.mjs","../src/core/write/writeFile.mjs","../src/core/create/createFile.mjs","../src/core/access/wrapper.mjs","../src/core/dir/dirIsExecutable.mjs","../src/core/dir/dirIsReadable.mjs","../src/core/dir/dirIsVisible.mjs","../src/core/dir/dirIsWritable.mjs","../src/core/file/fileIsExecutable.mjs","../src/core/file/fileIsReadable.mjs","../src/core/file/fileIsVisible.mjs","../src/core/file/fileIsWritable.mjs","../src/core/file/fileTruncate.mjs","../src/core/path/fileExtension.mjs","../src/core/path/fileName.mjs","../src/core/path/fileNameExt.mjs","../src/core/path/filePath.mjs","../src/core/remove/remove.mjs","../src/core/status/isDirExists.mjs","../src/core/status/isFileExists.mjs","../src/core/status/isPathExists.mjs","../src/core/HileSystemLocal.mjs"],"sourcesContent":["import { promises } from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\n/**\n * @name createDirectory\n * @description Asynchronous create a directory.\n * @since 0.0.10\n * @async\n * @param {string|Buffer|URL} dirPath\n * @param {number|string=} mode\n * @param {boolean=} recursive\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function createDirectory(dirPath, mode = \"0777\", recursive = true) {\n  const dirError = await ofError(promises.mkdir(dirPath, { mode, recursive }));\n  if (dirError) {\n    return dirError;\n  }\n  return true;\n}\n","import { promises } from \"fs\";\n\nimport { of } from \"@r37r0m0d3l/of\";\n\n/**\n * @name getStatus\n * @description Get file status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<[fs.Stats|undefined],[Error|{name: string, message: string, stack?: string}]>}\n */\nexport async function getStatus(path) {\n  return of(promises.stat(path));\n}\n","import { promises } from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\n/**\n * @name writeFile\n * @description Asynchronously writes data to a file, replacing the file if it already exists.\n * @since 0.0.10\n * @async\n * @param {string|Buffer|URL|FileHandle} filePath\n * @param {*=} data\n * @param {*|null|string=} options\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function writeFile(filePath, data, options) {\n  const writeError = await ofError(promises.writeFile(filePath, data, options));\n  if (writeError) {\n    return writeError;\n  }\n  return true;\n}\n","import path from \"path\";\nimport { promises } from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\nimport { createDirectory } from \"./createDirectory.mjs\";\nimport { getStatus } from \"../status/getStatus.mjs\";\nimport { writeFile } from \"../write/writeFile.mjs\";\n\n/**\n * @name createFile\n * @description Asynchronous create a file.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} pathLike\n * @param {number|string=} mode\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function createFile(pathLike, mode = \"0777\") {\n  const [status, error] = await getStatus(pathLike);\n  if (!error && status.isFile()) {\n    return true;\n  }\n  const dirPath = path.dirname(pathLike);\n  if (error) {\n    if (error.code === \"ENOENT\") {\n      const dirCreated = await createDirectory(dirPath, mode);\n      if (dirCreated !== true) {\n        return dirCreated;\n      }\n      const fileWritten = await writeFile(pathLike, \"\", { mode, flag: \"w\" });\n      if (fileWritten !== true) {\n        return fileWritten;\n      }\n      return true;\n    }\n  }\n  if (status.isDirectory()) {\n    return await writeFile(pathLike, \"\", { mode, flag: \"w\" });\n  } else {\n    return await ofError(promises.readdir(dirPath));\n  }\n}\n","import { promises } from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\n/**\n * @name accessWrapper\n * @description Asynchronously tests a user's permissions for the file specified by path.\n * @since 0.0.1\n * @async\n * @param {number} mode\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function accessWrapper(mode, path) {\n  const fsError = await ofError(promises.access(path, mode));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsExecutable\n * @description Directory can be executed by the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function dirIsExecutable(pathToDir) {\n  return accessWrapper(constants.X_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsReadable\n * @description Directory is visible to the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function dirIsReadable(pathToDir) {\n  return accessWrapper(constants.R_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsVisible\n * @description Directory is visible to the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function dirIsVisible(pathToDir) {\n  return accessWrapper(constants.F_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsWritable\n * @description Directory can be written by the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function dirIsWritable(pathToDir) {\n  return accessWrapper(constants.W_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsExecutable\n * @description File can be executed by the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function fileIsExecutable(pathToFile) {\n  return accessWrapper(constants.X_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsReadable\n * @description File is visible to the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function fileIsReadable(pathToFile) {\n  return accessWrapper(constants.R_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsVisible\n * @description File is visible to the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function fileIsVisible(pathToFile) {\n  return accessWrapper(constants.F_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport { accessWrapper } from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsWritable\n * @description File can be written by the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function fileIsWritable(pathToFile) {\n  return accessWrapper(constants.W_OK, pathToFile);\n}\n","import { promises } from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\n/**\n * @name fileTruncate\n * @description Truncate a file to a specified length\n * @since 0.0.6\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @param {number=} length\n * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function fileTruncate(pathToFile, length = 0) {\n  const fsError = await ofError(promises.truncate(pathToFile, length));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import { extname } from \"path\";\n\n/**\n * @name fileExtension\n * @description Get file extension.\n * @since 0.1.1\n * @param {string} path\n * @returns {string}\n */\nexport function fileExtension(path) {\n  return extname(path).substring(1);\n}\n","import { parse } from \"path\";\n\n/**\n * @name fileName\n * @description Return the file name without extension.\n * @since 0.1.1\n * @param {string} path\n * @returns {string}\n */\nexport function fileName(path) {\n  return parse(path).name;\n}\n","import { basename } from \"path\";\n\n/**\n * @name fileNameExt\n * @description Return the last portion of a path.\n * @since 0.1.1\n * @param {string} path\n * @returns {string}\n */\nexport function fileNameExt(path) {\n  return basename(path);\n}\n","import { dirname } from \"path\";\n\n/**\n * @name filePath\n * @description Return the directory name of a path.\n * @since 0.1.1\n * @param {string} path\n * @returns {string}\n */\nexport function filePath(path) {\n  return dirname(path);\n}\n","import * as fs from \"fs\";\nimport assert from \"assert\";\nimport path from \"path\";\n\nconst IS_WINDOWS = process.platform === \"win32\";\n\nfunction defaults(options) {\n  const methods = [\"unlink\", \"chmod\", \"stat\", \"lstat\", \"rmdir\", \"readdir\"];\n  methods.forEach((method) => {\n    options[method] = options[method] || fs[method];\n  });\n  options.maxBusyTries = options.maxBusyTries || 3;\n}\n\nfunction rimraf(pathLike, options, callback) {\n  let busyTries = 0;\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  assert(pathLike, \"remove(): missing path\");\n  assert.strictEqual(typeof pathLike, \"string\", \"remove(): path should be a string\");\n  assert.strictEqual(typeof callback, \"function\", \"remove(): callback function required\");\n  assert(options, \"remove(): invalid options argument provided\");\n  assert.strictEqual(typeof options, \"object\", \"remove(): options should be object\");\n  defaults(options);\n  rimraf_(pathLike, options, function callbackRimraf(error) {\n    if (error) {\n      if (\n        (error.code === \"EBUSY\" || error.code === \"ENOTEMPTY\" || error.code === \"EPERM\") &&\n        busyTries < options.maxBusyTries\n      ) {\n        busyTries++;\n        const time = busyTries * 100;\n        return setTimeout(() => rimraf_(pathLike, options, callbackRimraf), time);\n      }\n      if (error.code === \"ENOENT\") {\n        error = null;\n      }\n    }\n    callback(error);\n  });\n}\n\nfunction rimraf_(pathLike, options, callback) {\n  assert(pathLike);\n  assert(options);\n  assert(typeof callback === \"function\");\n  options.lstat(pathLike, (error, stats) => {\n    if (error && error.code === \"ENOENT\") {\n      return callback(null);\n    }\n    if (error && error.code === \"EPERM\" && IS_WINDOWS) {\n      return fixWinEPERM(pathLike, options, error, callback);\n    }\n    if (stats && stats.isDirectory()) {\n      return rmdir(pathLike, options, error, callback);\n    }\n    options.unlink(pathLike, (error) => {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          return callback(null);\n        }\n        if (error.code === \"EPERM\") {\n          if (IS_WINDOWS) {\n            return fixWinEPERM(pathLike, options, error, callback);\n          } else {\n            return rmdir(pathLike, options, error, callback);\n          }\n        }\n        if (error.code === \"EISDIR\") {\n          return rmdir(pathLike, options, error, callback);\n        }\n      }\n      return callback(error);\n    });\n  });\n}\n\nfunction fixWinEPERM(pathLike, options, error, callback) {\n  assert(pathLike);\n  assert(options);\n  assert(typeof callback === \"function\");\n  if (error) {\n    assert(error instanceof Error);\n  }\n  options.chmod(pathLike, 0o666, (errorChMod) => {\n    if (errorChMod) {\n      callback(errorChMod.code === \"ENOENT\" ? null : error);\n    } else {\n      options.stat(pathLike, (errorStat, stats) => {\n        if (errorStat) {\n          callback(errorStat.code === \"ENOENT\" ? null : error);\n        } else if (stats.isDirectory()) {\n          rmdir(pathLike, options, error, callback);\n        } else {\n          options.unlink(pathLike, callback);\n        }\n      });\n    }\n  });\n}\n\nfunction rmdir(pathLike, options, originalError, callback) {\n  assert(pathLike);\n  assert(options);\n  if (originalError) {\n    assert(originalError instanceof Error);\n  }\n  assert(typeof callback === \"function\");\n  options.rmdir(pathLike, (error) => {\n    if (error && (error.code === \"ENOTEMPTY\" || error.code === \"EEXIST\" || error.code === \"EPERM\")) {\n      removeSubPath(pathLike, options, callback);\n    } else if (error && error.code === \"ENOTDIR\") {\n      callback(originalError);\n    } else {\n      callback(error);\n    }\n  });\n}\n\nfunction removeSubPath(pathLike, options, callback) {\n  assert(pathLike);\n  assert(options);\n  assert(typeof callback === \"function\");\n  options.readdir(pathLike, (error, files) => {\n    if (error) {\n      return callback(error);\n    }\n    let count = files.length;\n    let errState;\n    if (count === 0) {\n      return options.rmdir(pathLike, callback);\n    }\n    files.forEach((filePath) => {\n      rimraf(path.join(pathLike, filePath), options, (error) => {\n        if (errState) {\n          return;\n        }\n        if (error) {\n          return callback((errState = error));\n        }\n        if (--count === 0) {\n          options.rmdir(pathLike, callback);\n        }\n      });\n    });\n  });\n}\n\n/**\n * @name remove\n * @description Removes a file or directory.\n * @since 0.1.1\n * @async\n * @param {string} pathLike\n * @returns {Promise<undefined|Error|{name: string, message: string, stack?: string}>}\n */\nexport async function remove(pathLike) {\n  return new Promise((resolve, reject) => {\n    rimraf(pathLike, {}, (error) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n","import { getStatus } from \"./getStatus.mjs\";\n\n/**\n * @name isDirExists\n * @description Get directory status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean>}\n */\nexport async function isDirExists(path) {\n  const [status, error] = await getStatus(path);\n  if (error) {\n    return false;\n  }\n  return status.isDirectory();\n}\n","import { getStatus } from \"./getStatus.mjs\";\n\n/**\n * @name isFileExists\n * @description Get file status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean>}\n */\nexport async function isFileExists(path) {\n  const [status, error] = await getStatus(path);\n  if (error) {\n    return false;\n  }\n  return status.isFile();\n}\n","import { getStatus } from \"./getStatus.mjs\";\n\n/**\n * @name isPathExists\n * @description Get path status.\n * @since 0.0.11\n * @async\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean>}\n */\nexport async function isPathExists(path) {\n  const [status] = await getStatus(path);\n  return Boolean(status);\n}\n","import { createDirectory } from \"./create/createDirectory.mjs\";\nimport { createFile } from \"./create/createFile.mjs\";\nimport { dirIsExecutable } from \"./dir/dirIsExecutable.mjs\";\nimport { dirIsReadable } from \"./dir/dirIsReadable.mjs\";\nimport { dirIsVisible } from \"./dir/dirIsVisible.mjs\";\nimport { dirIsWritable } from \"./dir/dirIsWritable.mjs\";\nimport { fileIsExecutable } from \"./file/fileIsExecutable.mjs\";\nimport { fileIsReadable } from \"./file/fileIsReadable.mjs\";\nimport { fileIsVisible } from \"./file/fileIsVisible.mjs\";\nimport { fileIsWritable } from \"./file/fileIsWritable.mjs\";\nimport { fileTruncate } from \"./file/fileTruncate.mjs\";\nimport { getStatus } from \"./status/getStatus.mjs\";\nimport { isDirExists } from \"./status/isDirExists.mjs\";\nimport { isFileExists } from \"./status/isFileExists.mjs\";\nimport { isPathExists } from \"./status/isPathExists.mjs\";\nimport { writeFile } from \"./write/writeFile.mjs\";\nimport { fileExtension } from \"./path/fileExtension.mjs\";\nimport { fileName } from \"./path/fileName.mjs\";\nimport { fileNameExt } from \"./path/fileNameExt.mjs\";\nimport { filePath } from \"./path/filePath.mjs\";\nimport { remove } from \"./remove/remove.mjs\";\n\nexport class HileSystemLocal {\n  /**\n   * @name createDirectory\n   * @description Asynchronous create a directory.\n   * @since 0.0.10\n   * @async\n   * @public\n   * @param {string|Buffer|URL} dirPath\n   * @param {number|string=} mode\n   * @param {boolean=} recursive\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  createDirectory = createDirectory;\n  /**\n   * @name createFile\n   * @description Asynchronous create a file.\n   * @since 0.0.11\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathLike\n   * @param {number|string=} mode\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  createFile = createFile;\n  /**\n   * @name dirIsExecutable\n   * @description Directory can be executed by the calling process\n   * @since 0.0.5\n   * @async\n   * @public\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  dirIsExecutable = dirIsExecutable;\n  /**\n   * @name dirIsReadable\n   * @description Directory is visible to the calling process\n   * @since 0.0.1\n   * @async\n   * @public\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  dirIsReadable = dirIsReadable;\n  /**\n   * @name dirIsVisible\n   * @description Directory is visible to the calling process\n   * @since 0.0.5\n   * @async\n   * @public\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  dirIsVisible = dirIsVisible;\n  /**\n   * @name dirIsWritable\n   * @description Directory can be written by the calling process\n   * @since 0.0.1\n   * @async\n   * @public\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  dirIsWritable = dirIsWritable;\n  /**\n   * @name getStatus\n   * @description Get file status.\n   * @since 0.0.11\n   * @async\n   * @public\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<[fs.Stats|undefined],[Error|{name: string, message: string, stack?: string}]>}\n   */\n  getStatus = getStatus;\n  /**\n   * @name isDirExists\n   * @description Get directory status.\n   * @since 0.0.11\n   * @async\n   * @public\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<boolean>}\n   */\n  isDirExists = isDirExists;\n  /**\n   * @name isFileExists\n   * @description Get file status.\n   * @since 0.0.11\n   * @async\n   * @public\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<boolean>}\n   */\n  isFileExists = isFileExists;\n  /**\n   * @name isPathExists\n   * @description Get path status.\n   * @since 0.0.11\n   * @async\n   * @public\n   * @param {string|Buffer|URL} path\n   * @returns {Promise<boolean>}\n   */\n  isPathExists = isPathExists;\n  /**\n   * @name fileExtension\n   * @description Get file extension.\n   * @since 0.1.1\n   * @public\n   * @param {string} path\n   * @returns {string}\n   */\n  fileExtension = fileExtension;\n  /**\n   * @name fileName\n   * @description Return the file name without extension.\n   * @since 0.1.1\n   * @public\n   * @param {string} path\n   * @returns {string}\n   */\n  fileName = fileName;\n  /**\n   * @name fileNameExt\n   * @description Return the last portion of a path.\n   * @since 0.1.1\n   * @public\n   * @param {string} path\n   * @returns {string}\n   */\n  fileNameExt = fileNameExt;\n  /**\n   * @name filePath\n   * @description Return the directory name of a path.\n   * @since 0.1.1\n   * @public\n   * @param {string} path\n   * @returns {string}\n   */\n  filePath = filePath;\n  /**\n   * @name fileIsExecutable\n   * @description File can be executed by the calling process\n   * @since 0.0.5\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  fileIsExecutable = fileIsExecutable;\n  /**\n   * @name fileIsReadable\n   * @description File is visible to the calling process\n   * @since 0.0.1\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  fileIsReadable = fileIsReadable;\n  /**\n   * @name fileIsVisible\n   * @description File is visible to the calling process\n   * @since 0.0.5\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  fileIsVisible = fileIsVisible;\n  /**\n   * @name fileIsWritable\n   * @description File can be written by the calling process\n   * @since 0.0.1\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  fileIsWritable = fileIsWritable;\n  /**\n   * @name fileTruncate\n   * @description Truncate a file to a specified length\n   * @since 0.0.6\n   * @async\n   * @public\n   * @param {string|Buffer|URL} pathToFile\n   * @param {number=} length\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  fileTruncate = fileTruncate;\n  /**\n   * @name remove\n   * @description Removes a file or directory.\n   * @since 0.1.1\n   * @async\n   * @public\n   * @param {string} pathLike\n   * @returns {Promise<undefined|Error|{name: string, message: string, stack?: string}>}\n   */\n  remove = remove;\n  /**\n   * @name writeFile\n   * @description Asynchronously writes data to a file, replacing the file if it already exists.\n   * @since 0.0.10\n   * @async\n   * @public\n   * @param {string|Buffer|URL|FileHandle} filePath\n   * @param {*=} data\n   * @param {*|null|string=} options\n   * @returns {Promise<boolean|Error|{name: string, message: string, stack?: string}>}\n   */\n  writeFile = writeFile;\n}\n"],"names":["async","createDirectory","dirPath","mode","recursive","dirError","ofError","promises","mkdir","getStatus","path","of","stat","writeFile","filePath","data","options","writeError","createFile","pathLike","status","error","isFile","dirname","code","dirCreated","fileWritten","flag","isDirectory","readdir","accessWrapper","fsError","access","dirIsExecutable","pathToDir","constants","X_OK","dirIsReadable","R_OK","dirIsVisible","F_OK","dirIsWritable","W_OK","fileIsExecutable","pathToFile","fileIsReadable","fileIsVisible","fileIsWritable","fileTruncate","length","truncate","fileExtension","extname","substring","fileName","parse","name","fileNameExt","basename","IS_WINDOWS","process","platform","rimraf","callback","busyTries","assert","strictEqual","defaults","forEach","method","fs","maxBusyTries","rimraf_","callbackRimraf","setTimeout","lstat","stats","fixWinEPERM","rmdir","unlink","Error","chmod","errorChMod","errorStat","originalError","removeSubPath","files","errState","count","join","remove","Promise","resolve","reject","isDirExists","isFileExists","isPathExists","Boolean","HileSystemLocal"],"mappings":"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"}