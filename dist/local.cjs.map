{"version":3,"file":"local.cjs","sources":["../src/core/create/createDirectory.mjs","../src/core/access/wrapper.mjs","../src/core/dir/dirIsExecutable.mjs","../src/core/dir/dirIsReadable.mjs","../src/core/dir/dirIsVisible.mjs","../src/core/dir/dirIsWritable.mjs","../src/core/file/fileIsExecutable.mjs","../src/core/file/fileIsReadable.mjs","../src/core/file/fileIsVisible.mjs","../src/core/file/fileIsWritable.mjs","../src/core/file/fileTruncate.mjs","../src/core/write/writeFile.mjs","../src/index.mjs"],"sourcesContent":["import { promises } from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\n/**\n * @name createDirectory\n * @description Asynchronous create a directory.\n * @since 0.0.10\n * @async\n * @param {string|Buffer|URL} dirPath\n * @param {number|string=} mode\n * @param {boolean=} recursive\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function createDirectory(dirPath, mode = \"0777\", recursive = true) {\n  const fsError = await ofError(promises.mkdir(dirPath, { mode, recursive }));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import * as fs from \"fs\";\n\nimport { default as OF } from \"@r37r0m0d3l/of\";\n\n/**\n * @name accessWrapper\n * @description Asynchronously tests a user's permissions for the file specified by path.\n * @since 0.0.1\n * @async\n * @param {number} mode\n * @param {string|Buffer|URL} path\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function accessWrapper(mode, path) {\n  const fsError = await OF.ofError(fs.promises.access(path, mode));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsExecutable\n * @description Directory can be executed by the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsExecutable(pathToDir) {\n  return accessWrapper(constants.X_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsReadable\n * @description Directory is visible to the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsReadable(pathToDir) {\n  return accessWrapper(constants.R_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsVisible\n * @description Directory is visible to the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsVisible(pathToDir) {\n  return accessWrapper(constants.F_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name dirIsWritable\n * @description Directory can be written by the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToDir\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function dirIsWritable(pathToDir) {\n  return accessWrapper(constants.W_OK, pathToDir);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsExecutable\n * @description File can be executed by the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsExecutable(pathToFile) {\n  return accessWrapper(constants.X_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsReadable\n * @description File is visible to the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsReadable(pathToFile) {\n  return accessWrapper(constants.R_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsVisible\n * @description File is visible to the calling process\n * @since 0.0.5\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsVisible(pathToFile) {\n  return accessWrapper(constants.F_OK, pathToFile);\n}\n","import { constants } from \"fs\";\n\nimport accessWrapper from \"../access/wrapper.mjs\";\n\n/**\n * @name fileIsWritable\n * @description File can be written by the calling process\n * @since 0.0.1\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileIsWritable(pathToFile) {\n  return accessWrapper(constants.W_OK, pathToFile);\n}\n","import { promises } from \"fs\";\n\nimport { default as OF } from \"@r37r0m0d3l/of\";\n\n/**\n * @name fileTruncate\n * @description Truncate a file to a specified length\n * @since 0.0.6\n * @async\n * @param {string|Buffer|URL} pathToFile\n * @param {number=0} length\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function fileTruncate(pathToFile, length = 0) {\n  const fsError = await OF.ofError(promises.truncate(pathToFile, length));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import { promises } from \"fs\";\n\nimport { ofError } from \"@r37r0m0d3l/of\";\n\n/**\n * @name writeFile\n * @description Asynchronously writes data to a file, replacing the file if it already exists.\n * @since 0.0.10\n * @async\n * @param {string|Buffer|URL|FileHandle} filePath\n * @param {*=} data\n * @param {*|null|string=} options\n * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n */\nexport default async function writeFile(filePath, data, options) {\n  const fsError = await ofError(promises.writeFile(filePath, data, options));\n  if (!fsError) {\n    return true;\n  }\n  return fsError;\n}\n","import createDirectory from \"./core/create/createDirectory.mjs\";\n\nimport dirIsExecutable from \"./core/dir/dirIsExecutable.mjs\";\nimport dirIsReadable from \"./core/dir/dirIsReadable.mjs\";\nimport dirIsVisible from \"./core/dir/dirIsVisible.mjs\";\nimport dirIsWritable from \"./core/dir/dirIsWritable.mjs\";\n\nimport fileIsExecutable from \"./core/file/fileIsExecutable.mjs\";\nimport fileIsReadable from \"./core/file/fileIsReadable.mjs\";\nimport fileIsVisible from \"./core/file/fileIsVisible.mjs\";\nimport fileIsWritable from \"./core/file/fileIsWritable.mjs\";\n\nimport fileTruncate from \"./core/file/fileTruncate.mjs\";\n\nimport writeFile from \"./core/write/writeFile.mjs\";\n\nclass HileSystemLocal {\n  /**\n   * @name createDirectory\n   * @description Asynchronous create a directory.\n   * @since 0.0.10\n   * @async\n   * @static\n   * @param {string|Buffer|URL} dirPath\n   * @param {number|string=} mode\n   * @param {boolean=} recursive\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static createDirectory = createDirectory;\n  /**\n   * @name dirIsExecutable\n   * @description Directory can be executed by the calling process\n   * @since 0.0.5\n   * @async\n   * @static\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsExecutable = dirIsExecutable;\n  /**\n   * @name dirIsReadable\n   * @description Directory is visible to the calling process\n   * @since 0.0.1\n   * @async\n   * @static\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsReadable = dirIsReadable;\n  /**\n   * @name dirIsVisible\n   * @description Directory is visible to the calling process\n   * @since 0.0.5\n   * @async\n   * @static\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsVisible = dirIsVisible;\n  /**\n   * @name dirIsWritable\n   * @description Directory can be written by the calling process\n   * @since 0.0.1\n   * @async\n   * @static\n   * @param {string} pathToDir\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static dirIsWritable = dirIsWritable;\n  /**\n   * @name fileIsExecutable\n   * @description File can be executed by the calling process\n   * @since 0.0.5\n   * @async\n   * @static\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsExecutable = fileIsExecutable;\n  /**\n   * @name fileIsReadable\n   * @description File is visible to the calling process\n   * @since 0.0.1\n   * @async\n   * @static\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsReadable = fileIsReadable;\n  /**\n   * @name fileIsVisible\n   * @description File is visible to the calling process\n   * @since 0.0.5\n   * @async\n   * @static\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsVisible = fileIsVisible;\n  /**\n   * @name fileIsWritable\n   * @description File can be written by the calling process\n   * @since 0.0.1\n   * @async\n   * @static\n   * @param {string|Buffer|URL} pathToFile\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileIsWritable = fileIsWritable;\n  /**\n   * @name fileTruncate\n   * @description Truncate a file to a specified length\n   * @since 0.0.6\n   * @async\n   * @static\n   * @param {string|Buffer|URL} pathToFile\n   * @param {number=0} length\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static fileTruncate = fileTruncate;\n  /**\n   * @name writeFile\n   * @description Asynchronously writes data to a file, replacing the file if it already exists.\n   * @since 0.0.10\n   * @async\n   * @static\n   * @param {string|Buffer|URL|FileHandle} filePath\n   * @param {*=} data\n   * @param {*|null|string=} options\n   * @returns {Promise<boolean|Error|{readonly name: string, readonly message: string, readonly stack?: string}>}\n   */\n  static writeFile = writeFile;\n}\n\nexport {\n  HileSystemLocal,\n  createDirectory,\n  dirIsExecutable,\n  dirIsReadable,\n  dirIsVisible,\n  dirIsWritable,\n  fileIsExecutable,\n  fileIsReadable,\n  fileIsVisible,\n  fileIsWritable,\n  fileTruncate,\n  writeFile,\n};\n"],"names":["async","createDirectory","dirPath","mode","recursive","fsError","ofError","promises","mkdir","accessWrapper","path","OF","fs","access","dirIsExecutable","pathToDir","constants","X_OK","dirIsReadable","R_OK","dirIsVisible","F_OK","dirIsWritable","W_OK","fileIsExecutable","pathToFile","fileIsReadable","fileIsVisible","fileIsWritable","fileTruncate","length","truncate","writeFile","filePath","data","options","HileSystemLocal"],"mappings":"oVAceA,eAAeC,gBAAgBC,EAASC,EAAO,OAAQC,GAAY,SAC1EC,QAAgBC,UAAQC,WAASC,MAAMN,EAAS,CAAEC,KAAAA,EAAMC,UAAAA,YACzDC,IACI,ECJIL,eAAeS,cAAcN,EAAMO,SAC1CL,QAAgBM,EAAGL,QAAQM,WAAYC,OAAOH,EAAMP,WACrDE,IACI,ECJIL,eAAec,gBAAgBC,UACrCN,cAAcO,YAAUC,KAAMF,GCDxBf,eAAekB,cAAcH,UACnCN,cAAcO,YAAUG,KAAMJ,GCDxBf,eAAeoB,aAAaL,UAClCN,cAAcO,YAAUK,KAAMN,GCDxBf,eAAesB,cAAcP,UACnCN,cAAcO,YAAUO,KAAMR,GCDxBf,eAAewB,iBAAiBC,UACtChB,cAAcO,YAAUC,KAAMQ,GCDxBzB,eAAe0B,eAAeD,UACpChB,cAAcO,YAAUG,KAAMM,GCDxBzB,eAAe2B,cAAcF,UACnChB,cAAcO,YAAUK,KAAMI,GCDxBzB,eAAe4B,eAAeH,UACpChB,cAAcO,YAAUO,KAAME,GCAxBzB,eAAe6B,aAAaJ,EAAYK,EAAS,SACxDzB,QAAgBM,EAAGL,QAAQC,WAASwB,SAASN,EAAYK,WAC1DzB,IACI,ECFIL,eAAegC,UAAUC,EAAUC,EAAMC,SAChD9B,QAAgBC,UAAQC,WAASyB,UAAUC,EAAUC,EAAMC,WAC5D9B,IACI,ECDX,MAAM+B,iCAAAA,kCAYqBnC,iCAZrBmC,kCAsBqBtB,iCAtBrBsB,gCAgCmBlB,+BAhCnBkB,+BA0CkBhB,8BA1ClBgB,gCAoDmBd,+BApDnBc,mCA8DsBZ,kCA9DtBY,iCAwEoBV,gCAxEpBU,gCAkFmBT,+BAlFnBS,iCA4FoBR,gCA5FpBQ,+BAuGkBP,8BAvGlBO,4BAmHeJ"}